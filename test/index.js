const logger = require('..').apply({ name: 'traceLogger', level: 'trace' });
const infoLogger = require('..').new({ name: 'infoLogger', level: 'info' });
const testObject = {
	value: 'I\'m an object!'
};

logger.log('Hello world!', logger.br, 'This is just a runtime log!\n');
logger.fatal('Fatal log!');
logger.error('Error log!');
logger.warn('Warn log!');
logger.success('Success log!');
logger.info('Info log!');
logger.debug('Debug log!');
logger.trace('Trace log!');
logger.log();

logger.warn(logger.title(['I\'m a title!', 'Now testing .apply() and loggers hierarchy.'], { color: 'cyan', borderColor: 'magenta', align: 'right' }));
logger.apply({ disableColors: true });
const sadLogger = require('..').new({ name: 'sadLogger', level: 'info' });
logger.info('Colors have been disabled.', testObject);
sadLogger.info('Colors been disabled for me too since i was created after.', testObject);
infoLogger.info('Colors have not been disabled for me since i was created before.', testObject);
logger.apply({ disableColors: false });
logger.info('Colors have been restored.', testObject);
sadLogger.info('Colors are still disabled for me.', testObject);
infoLogger.info('Colors are still enabled for me.', testObject);
// const loggerEmitter = logger.emitter('testEmitter');
// loggerEmitter.success('Hello world!', logger.br, 'I am an emitter for traceLogger!');
logger.log();
logger.warn(logger.title(['I\'m a centered title with type 1 and char "="!', '', 'Now testing Secrets.'], { color: 'cyan', borderColor: 'magenta', char: '=', type: 1, align: 'center' }));

logger.info('I log up to "trace" so this secret is clear:', logger.secret('some secret'));
// loggerEmitter.info('I inherit my father\'s options so even this secret is clear:', logger.secret('some secret', {
// 	maxLength: 4
// }));
logger.info('I even work with objects:', logger.secret(logger.br + 'Test:'), logger.secret(testObject));

infoLogger.info('I instead log up to "info" so this secret is masked:', infoLogger.secret('some secret'));
infoLogger.info('This is the same secret but has max length of 4:', infoLogger.secret('some secret', {
	maxLength: 4
}));
infoLogger.info('And I even work with objects too:', logger.secret(testObject));

infoLogger.info('Even if this secret is generated by another logger should still be masked:', logger.secret('some secret'));
infoLogger.info('String contatenation resolves the secret immediatly, this should be hidden: ' + infoLogger.secret('some secret'));
infoLogger.info('And this shouldn\'t: ' + logger.secret('some secret'));
infoLogger.debug('And since i log up to "info" this will never print!');

logger.log();
logger.warn(logger.title('Now testing Timers.', { color: 'cyan', borderColor: 'magenta', type: 2 }));

const obj1 = {
	prop: 'I\'m an object.'
};
const obj2 = {
	prop: 'I\'m an object.',
	toString() {
		return this.prop.replace('.', ' with overloaded toString().');
	}
};
logger.success('Standard object:', obj1);
logger.success('Overloaded object:', obj2);

const timer = logger.timers.start('timer1');

setTimeout(() => {
	const value = timer.value;
	logger.log('Testing timer after 500ms: ' + value.pretty + '(' + value + 'ms).');
	logger.log('Pausing timer for 200ms');
	timer.stop();
	setTimeout(() => {
		logger.timers.start('timer1');
	}, 200);
}, 500);

setTimeout(() => {
	const value = logger.timers.resolve(timer.toString());
	logger.log('Resolving timer after 1400ms, paused for 200ms: ' + value.pretty + '(' + value + 'ms).');
}, 1400);

const zerologger = require('..').new({ name: 'zerologger', level: 0 });
zerologger.info('I have a logger level of 0.');
zerologger.fatal('I have a logger level of 0.');
zerologger.log('I have a logger level of 0.');

const silentlogger = require('..').new({ name: 'silentlogger', level: 'silent' });
silentlogger.info('I have a logger level of -1.');
silentlogger.fatal('I have a logger level of -1.');
silentlogger.log('I have a logger level of -1.');

const negativelogger = require('..').new({ name: 'negativelogger', level: -2 });
negativelogger.info('I have a logger level of -2.');
negativelogger.fatal('I have a logger level of -2.');
negativelogger.log('I have a logger level of -2.');
